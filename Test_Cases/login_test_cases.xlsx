import pandas as pd

# Define test cases for each login method
test_cases = [
    # Social Login: Google
    {
        "Test Case ID": "TC_Login_001",
        "Scenario": "Sign in with Google",
        "Steps": "Click 'Sign in with Google' button\nAllow permissions\nRedirect back to app",
        "Expected Result": "User is successfully logged in and redirected to dashboard",
        "Test Data": "Valid Google account",
        "Priority": "High",
        "Status": "Not Executed"
    },
    # Social Login: Apple
    {
        "Test Case ID": "TC_Login_002",
        "Scenario": "Sign in with Apple",
        "Steps": "Click 'Sign in with Apple' button\nAuthenticate with Apple ID\nRedirect to app",
        "Expected Result": "User is successfully logged in and redirected to dashboard",
        "Test Data": "Valid Apple ID",
        "Priority": "High",
        "Status": "Not Executed"
    },
    # Social Login: Facebook
    {
        "Test Case ID": "TC_Login_003",
        "Scenario": "Sign in with Facebook",
        "Steps": "Click 'Sign in with Facebook' button\nAuthenticate with Facebook\nRedirect to app",
        "Expected Result": "User is successfully logged in and redirected to dashboard",
        "Test Data": "Valid Facebook account",
        "Priority": "High",
        "Status": "Not Executed"
    },
    # Email Login: Valid credentials
    {
        "Test Case ID": "TC_Login_004",
        "Scenario": "Login with valid email and password",
        "Steps": "Enter email and password\nClick Login",
        "Expected Result": "User is logged in and redirected to dashboard",
        "Test Data": "Valid email and password",
        "Priority": "High",
        "Status": "Not Executed"
    },
    # Email Login: Invalid password
    {
        "Test Case ID": "TC_Login_005",
        "Scenario": "Login with incorrect password",
        "Steps": "Enter valid email and incorrect password\nClick Login",
        "Expected Result": "Error message displayed: 'Incorrect password'",
        "Test Data": "Valid email, wrong password",
        "Priority": "Medium",
        "Status": "Not Executed"
    },
    # Email Login: Invalid email
    {
        "Test Case ID": "TC_Login_006",
        "Scenario": "Login with invalid email format",
        "Steps": "Enter malformed email (e.g., 'user@')\nClick Login",
        "Expected Result": "Validation error displayed",
        "Test Data": "Invalid email",
        "Priority": "Low",
        "Status": "Not Executed"
    },
    # Secret Key Login: Valid key
    {
        "Test Case ID": "TC_Login_007",
        "Scenario": "Login using valid secret key",
        "Steps": "Click 'Use Secret Key'\nPaste valid key\nClick Submit",
        "Expected Result": "User is logged in and redirected to dashboard",
        "Test Data": "Valid secret key",
        "Priority": "High",
        "Status": "Not Executed"
    },
    # Secret Key Login: Invalid key
    {
        "Test Case ID": "TC_Login_008",
        "Scenario": "Login using invalid secret key",
        "Steps": "Click 'Use Secret Key'\nPaste invalid/expired key\nClick Submit",
        "Expected Result": "Error message: 'Invalid or expired key'",
        "Test Data": "Invalid secret key",
        "Priority": "Medium",
        "Status": "Not Executed"
    },
    # Secret Key Generation
    {
        "Test Case ID": "TC_Login_009",
        "Scenario": "Generate a new secret key",
        "Steps": "Click 'Create a new key'\nCopy generated key",
        "Expected Result": "Key is successfully generated and copied",
        "Test Data": "N/A",
        "Priority": "Medium",
        "Status": "Not Executed"
    }
]

# Convert to DataFrame and export to Excel
df = pd.DataFrame(test_cases)
file_path = "/mnt/data/CovertlyAI_Login_Test_Cases.xlsx"
df.to_excel(file_path, index=False)

file_path
import pandas as pd

# Define test cases for each login method
test_cases = [
    # Social Login: Google
    {
        "Test Case ID": "TC_Login_001",
        "Scenario": "Sign in with Google",
        "Steps": "Click 'Sign in with Google' button\nAllow permissions\nRedirect back to app",
        "Expected Result": "User is successfully logged in and redirected to dashboard",
        "Test Data": "Valid Google account",
        "Priority": "High",
        "Status": "Not Executed"
    },
    # Social Login: Apple
    {
        "Test Case ID": "TC_Login_002",
        "Scenario": "Sign in with Apple",
        "Steps": "Click 'Sign in with Apple' button\nAuthenticate with Apple ID\nRedirect to app",
        "Expected Result": "User is successfully logged in and redirected to dashboard",
        "Test Data": "Valid Apple ID",
        "Priority": "High",
        "Status": "Not Executed"
    },
    # Social Login: Facebook
    {
        "Test Case ID": "TC_Login_003",
        "Scenario": "Sign in with Facebook",
        "Steps": "Click 'Sign in with Facebook' button\nAuthenticate with Facebook\nRedirect to app",
        "Expected Result": "User is successfully logged in and redirected to dashboard",
        "Test Data": "Valid Facebook account",
        "Priority": "High",
        "Status": "Not Executed"
    },
    # Email Login: Valid credentials
    {
        "Test Case ID": "TC_Login_004",
        "Scenario": "Login with valid email and password",
        "Steps": "Enter email and password\nClick Login",
        "Expected Result": "User is logged in and redirected to dashboard",
        "Test Data": "Valid email and password",
        "Priority": "High",
        "Status": "Not Executed"
    },
    # Email Login: Invalid password
    {
        "Test Case ID": "TC_Login_005",
        "Scenario": "Login with incorrect password",
        "Steps": "Enter valid email and incorrect password\nClick Login",
        "Expected Result": "Error message displayed: 'Incorrect password'",
        "Test Data": "Valid email, wrong password",
        "Priority": "Medium",
        "Status": "Not Executed"
    },
    # Email Login: Invalid email
    {
        "Test Case ID": "TC_Login_006",
        "Scenario": "Login with invalid email format",
        "Steps": "Enter malformed email (e.g., 'user@')\nClick Login",
        "Expected Result": "Validation error displayed",
        "Test Data": "Invalid email",
        "Priority": "Low",
        "Status": "Not Executed"
    },
    # Secret Key Login: Valid key
    {
        "Test Case ID": "TC_Login_007",
        "Scenario": "Login using valid secret key",
        "Steps": "Click 'Use Secret Key'\nPaste valid key\nClick Submit",
        "Expected Result": "User is logged in and redirected to dashboard",
        "Test Data": "Valid secret key",
        "Priority": "High",
        "Status": "Not Executed"
    },
    # Secret Key Login: Invalid key
    {
        "Test Case ID": "TC_Login_008",
        "Scenario": "Login using invalid secret key",
        "Steps": "Click 'Use Secret Key'\nPaste invalid/expired key\nClick Submit",
        "Expected Result": "Error message: 'Invalid or expired key'",
        "Test Data": "Invalid secret key",
        "Priority": "Medium",
        "Status": "Not Executed"
    },
    # Secret Key Generation
    {
        "Test Case ID": "TC_Login_009",
        "Scenario": "Generate a new secret key",
        "Steps": "Click 'Create a new key'\nCopy generated key",
        "Expected Result": "Key is successfully generated and copied",
        "Test Data": "N/A",
        "Priority": "Medium",
        "Status": "Not Executed"
    }
]

# Convert to DataFrame and export to Excel
df = pd.DataFrame(test_cases)
file_path = "/mnt/data/CovertlyAI_Login_Test_Cases.xlsx"
df.to_excel(file_path, index=False)

file_path
